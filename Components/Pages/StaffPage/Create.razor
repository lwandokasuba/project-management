@page "/staff/create"
@using Microsoft.EntityFrameworkCore
@using Projects.Models
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Staff</h2>
<hr />
<div class="row">
  <div class="col-md-4">
    <EditForm method="post" Model="Staff" OnValidSubmit="AddStaff" FormName="create" Enhance>
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" role="alert" />
      <div class="mb-3">
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" aria-required="true" @bind-Value="Staff.Name" class="form-control" />
        <ValidationMessage For="() => Staff.Name" class="text-danger" />
      </div>
      <div class="mb-3">
        <label for="Position" class="form-label">Position:</label>
        <InputText id="Position" aria-required="true" @bind-Value="Staff.Position" class="form-control" />
        <ValidationMessage For="() => Staff.Position" class="text-danger" />
      </div>
      <div class="mb-3">
        <label for="hiredate" class="form-label">Hire Date:</label>
        <InputDate id="hiredate" @bind-Value="Staff.HireDate" class="form-control" />
        <ValidationMessage For="() => Staff.HireDate" class="text-danger" />
      </div>
      <div class="mb-3">
        <label for="status" class="form-label">Status:</label>
        <InputSelect id="status" @bind-Value="Staff.Status" class="form-select">
          <option value="">Select...</option>
          @foreach (var status in Enum.GetValues(typeof(StaffStatus)))
          {
            <option value="@status">@status</option>
          }
        </InputSelect>
        <ValidationMessage For="() => Staff.Status" class="text-danger" />

      </div>
      <br />
      <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
  </div>
</div>

<div>
  <a href="/staff">Back to List</a>
</div>

@code {
  [SupplyParameterFromForm]
  private Staff Staff { get; set; } = new()
  {
    Name = String.Empty,
    HireDate = DateTime.UtcNow,
    Status = StaffStatus.ACTIVE,
    UserId = String.Empty
  };

  private async Task AddStaff()
  {
    using var context = DbFactory.CreateDbContext();
    context.Staffs.Add(Staff);
    await context.SaveChangesAsync();
    NavigationManager.NavigateTo("/staff");
  }
}
