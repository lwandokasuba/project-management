@page "/expenses"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Projects.Models
@using Projects.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="@($"expenses/create?assignmentId={AssignmentId}")">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredExpenses">
    <PropertyColumn Property="expense => expense.Assignment != null ? expense.Assignment.Title : String.Empty" Title="Assignment"   />
    <PropertyColumn Property="expense => expense.Amount" />
    <PropertyColumn Property="expense => expense.Date" />
    <PropertyColumn Property="expense => expense.Description" />
    <PropertyColumn Property="expense => expense.CreatedAt" />
    <PropertyColumn Property="expense => expense.UpdatedAt" />

    <TemplateColumn Context="expense">
        <a href="@($"expenses/edit?expenseid={expense.ExpenseId}")">Edit</a> |
        <a href="@($"expenses/details?expenseid={expense.ExpenseId}")">Details</a> |
        <a href="@($"expenses/delete?expenseid={expense.ExpenseId}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    [SupplyParameterFromQuery]
    private int AssignmentId { get; set; }

    private ApplicationDbContext context = default!;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    private IQueryable<Expense> FilteredExpenses =>
        context.Expenses
        .Include(e => e.Assignment)
        .Where(m => m.AssignmentId == AssignmentId);

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
