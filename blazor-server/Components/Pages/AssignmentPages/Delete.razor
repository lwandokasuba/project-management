@page "/assignments/delete"
@using Microsoft.EntityFrameworkCore
@using Projects.Models
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Assignment</h2>
    <hr />
    @if (assignment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@assignment.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@assignment.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProjectId</dt>
            <dd class="col-sm-10">@assignment.ProjectId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StaffId</dt>
            <dd class="col-sm-10">@assignment.StaffId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@assignment.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@assignment.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@assignment.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@assignment.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@assignment.UpdatedAt</dd>
        </dl>
        <EditForm method="post" Model="assignment" OnValidSubmit="DeleteAssignment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(assignment is null)">Delete</button> |
            <a href="/assignments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Assignment? assignment;

    [SupplyParameterFromQuery]
    private int AssignmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        assignment = await context.Assignments.FirstOrDefaultAsync(m => m.AssignmentId == AssignmentId);

        if (assignment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAssignment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Assignments.Remove(assignment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/assignments");
    }
}
