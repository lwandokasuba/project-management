@page "/assignments/edit"
@using Microsoft.EntityFrameworkCore
@using Projects.Models
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Assignment</h2>
<hr />
@if (Assignment is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Assignment" OnValidSubmit="UpdateAssignment" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Assignment.AssignmentId" value="@Assignment.AssignmentId" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Assignment.Title" class="form-control" />
                    <ValidationMessage For="() => Assignment.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Assignment.Description" class="form-control" />
                    <ValidationMessage For="() => Assignment.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="projectid" class="form-label">ProjectId:</label>
                    <InputNumber id="projectid" @bind-Value="Assignment.ProjectId" class="form-control" />
                    <ValidationMessage For="() => Assignment.ProjectId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="staffid" class="form-label">StaffId:</label>
                    <InputNumber id="staffid" @bind-Value="Assignment.StaffId" class="form-control" />
                    <ValidationMessage For="() => Assignment.StaffId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Assignment.StartDate" class="form-control" />
                    <ValidationMessage For="() => Assignment.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="Assignment.EndDate" class="form-control" />
                    <ValidationMessage For="() => Assignment.EndDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Assignment.Status" class="form-select">
                        <option value="">Select...</option>
                        @foreach (var status in Enum.GetValues(typeof(AssignmentStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Assignment.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Assignment.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Assignment.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Assignment.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Assignment.UpdatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/assignments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AssignmentId { get; set; }

    [SupplyParameterFromForm]
    private Assignment? Assignment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Assignment ??= await context.Assignments.FirstOrDefaultAsync(m => m.AssignmentId == AssignmentId);

        if (Assignment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAssignment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Assignment!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AssignmentExists(Assignment!.AssignmentId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/assignments");
    }

    private bool AssignmentExists(int assignmentid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Assignments.Any(e => e.AssignmentId == assignmentid);
    }
}
