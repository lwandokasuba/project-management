@page "/assignments/create"
@using Microsoft.EntityFrameworkCore
@using Projects.Data
@using Projects.Models
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
       @inject ApplicationDbContext Context

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Assignment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Assignment" OnValidSubmit="AddAssignment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Assignment.Title" class="form-control" /> 
                <ValidationMessage For="() => Assignment.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Assignment.Description" class="form-control" /> 
                <ValidationMessage For="() => Assignment.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="projectid" class="form-label">Projects:</label>
                <InputSelect id="projectid" @bind-Value="Assignment.ProjectId" class="form-select">
                    <option value="">Select...</option>
                    @foreach (var project in FilteredProjects)
                    {
                        <option value="@project.ProjectId">@project.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Assignment.ProjectId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="staffid" class="form-label">Staff:</label>
                <InputSelect id="staffid" @bind-Value="Assignment.StaffId" class="form-select">
                    <option value="">Select...</option>
                    @foreach (var staff in FilteredStaff)
                    {
                        <option value="@staff.StaffId">@staff.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Assignment.StaffId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label> 
                <InputDate id="startdate" @bind-Value="Assignment.StartDate" class="form-control" /> 
                <ValidationMessage For="() => Assignment.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="enddate" class="form-label">EndDate:</label> 
                <InputDate id="enddate" @bind-Value="Assignment.EndDate" class="form-control" /> 
                <ValidationMessage For="() => Assignment.EndDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputSelect id="status" @bind-Value="Assignment.Status" class="form-select">
                    <option value="">Select...</option>
                    @foreach (var status in Enum.GetValues(typeof(AssignmentStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Assignment.Status" class="text-danger" />
            </div>               
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/assignments">Back to List</a>
</div>

@code {

     private IQueryable<Project> FilteredProjects =>  
         Context.Projects.Where(m => m.Status == ProjectStatus.CREATED || m.Status == ProjectStatus.IN_PROGRESS);
         
    private IQueryable<Staff> FilteredStaff =>
         Context.Staffs.Where(m => m.Status == StaffStatus.ACTIVE);

    [SupplyParameterFromForm]
    private Assignment Assignment { get; set; } = new()
        {
            Title = string.Empty,
            Description = string.Empty,
            ProjectId = 0,
            StaffId = 0,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now,
			Status = AssignmentStatus.ACTIVE,
        };



    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddAssignment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Assignments.Add(Assignment);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/assignments");
    }
}
