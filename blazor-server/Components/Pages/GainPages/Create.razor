@page "/gains/create"
@using Microsoft.EntityFrameworkCore
@using Projects.Models
@inject IDbContextFactory<Projects.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Gain</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Gain" OnValidSubmit="AddGain" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>       
            <div class="mb-3">
                <label for="amount" class="form-label">Amount:</label> 
                <InputNumber id="amount" @bind-Value="Gain.Amount" class="form-control" /> 
                <ValidationMessage For="() => Gain.Amount" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label> 
                <InputDate id="date" @bind-Value="Gain.Date" class="form-control" /> 
                <ValidationMessage For="() => Gain.Date" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Gain.Description" class="form-control" /> 
                <ValidationMessage For="() => Gain.Description" class="text-danger" /> 
            </div>               
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="@($"/gains?assignmentId={AssignmentId}")">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AssignmentId { get; set; }

    [SupplyParameterFromForm]
    private GainDTO Gain { get; set; } = new()
        {

            Date = DateTime.UtcNow,
            Amount = 0,
        };

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddGain()
    {
        using var context = DbFactory.CreateDbContext();
        context.Gains.Add(new()
        {
                AssignmentId = AssignmentId,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Date = Gain.Date,
                Amount = Gain.Amount,
                Description = Gain.Description
        });
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/gains?assignmentId={AssignmentId}");
    }
}
