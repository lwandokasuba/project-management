// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lwandokasuba/project-management/ent/assignment"
	"github.com/lwandokasuba/project-management/ent/predicate"
	"github.com/lwandokasuba/project-management/ent/statement"
)

// AssignmentUpdate is the builder for updating Assignment entities.
type AssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *AssignmentMutation
}

// Where appends a list predicates to the AssignmentUpdate builder.
func (au *AssignmentUpdate) Where(ps ...predicate.Assignment) *AssignmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AssignmentUpdate) SetUpdateTime(t time.Time) *AssignmentUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetTitle sets the "title" field.
func (au *AssignmentUpdate) SetTitle(s string) *AssignmentUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableTitle(s *string) *AssignmentUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AssignmentUpdate) SetDescription(s string) *AssignmentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDescription(s *string) *AssignmentUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AssignmentUpdate) ClearDescription() *AssignmentUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetStartDate sets the "start_date" field.
func (au *AssignmentUpdate) SetStartDate(t time.Time) *AssignmentUpdate {
	au.mutation.SetStartDate(t)
	return au
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableStartDate(t *time.Time) *AssignmentUpdate {
	if t != nil {
		au.SetStartDate(*t)
	}
	return au
}

// SetEndDate sets the "end_date" field.
func (au *AssignmentUpdate) SetEndDate(t time.Time) *AssignmentUpdate {
	au.mutation.SetEndDate(t)
	return au
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableEndDate(t *time.Time) *AssignmentUpdate {
	if t != nil {
		au.SetEndDate(*t)
	}
	return au
}

// ClearEndDate clears the value of the "end_date" field.
func (au *AssignmentUpdate) ClearEndDate() *AssignmentUpdate {
	au.mutation.ClearEndDate()
	return au
}

// SetStatus sets the "status" field.
func (au *AssignmentUpdate) SetStatus(a assignment.Status) *AssignmentUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableStatus(a *assignment.Status) *AssignmentUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (au *AssignmentUpdate) AddStatementIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.AddStatementIDs(ids...)
	return au
}

// AddStatements adds the "statements" edges to the Statement entity.
func (au *AssignmentUpdate) AddStatements(s ...*Statement) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddStatementIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (au *AssignmentUpdate) Mutation() *AssignmentMutation {
	return au.mutation
}

// ClearStatements clears all "statements" edges to the Statement entity.
func (au *AssignmentUpdate) ClearStatements() *AssignmentUpdate {
	au.mutation.ClearStatements()
	return au
}

// RemoveStatementIDs removes the "statements" edge to Statement entities by IDs.
func (au *AssignmentUpdate) RemoveStatementIDs(ids ...uuid.UUID) *AssignmentUpdate {
	au.mutation.RemoveStatementIDs(ids...)
	return au
}

// RemoveStatements removes "statements" edges to Statement entities.
func (au *AssignmentUpdate) RemoveStatements(s ...*Statement) *AssignmentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveStatementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssignmentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssignmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssignmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssignmentUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := assignment.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AssignmentUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := assignment.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Assignment.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := assignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Assignment.status": %w`, err)}
		}
	}
	if au.mutation.UserCleared() && len(au.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Assignment.user"`)
	}
	if au.mutation.ProjectCleared() && len(au.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Assignment.project"`)
	}
	return nil
}

func (au *AssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assignment.Table, assignment.Columns, sqlgraph.NewFieldSpec(assignment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(assignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(assignment.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(assignment.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(assignment.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.StartDate(); ok {
		_spec.SetField(assignment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.EndDate(); ok {
		_spec.SetField(assignment.FieldEndDate, field.TypeTime, value)
	}
	if au.mutation.EndDateCleared() {
		_spec.ClearField(assignment.FieldEndDate, field.TypeTime)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(assignment.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !au.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssignmentUpdateOne is the builder for updating a single Assignment entity.
type AssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssignmentMutation
}

// SetUpdateTime sets the "update_time" field.
func (auo *AssignmentUpdateOne) SetUpdateTime(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AssignmentUpdateOne) SetTitle(s string) *AssignmentUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableTitle(s *string) *AssignmentUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AssignmentUpdateOne) SetDescription(s string) *AssignmentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDescription(s *string) *AssignmentUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AssignmentUpdateOne) ClearDescription() *AssignmentUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetStartDate sets the "start_date" field.
func (auo *AssignmentUpdateOne) SetStartDate(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetStartDate(t)
	return auo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableStartDate(t *time.Time) *AssignmentUpdateOne {
	if t != nil {
		auo.SetStartDate(*t)
	}
	return auo
}

// SetEndDate sets the "end_date" field.
func (auo *AssignmentUpdateOne) SetEndDate(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetEndDate(t)
	return auo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableEndDate(t *time.Time) *AssignmentUpdateOne {
	if t != nil {
		auo.SetEndDate(*t)
	}
	return auo
}

// ClearEndDate clears the value of the "end_date" field.
func (auo *AssignmentUpdateOne) ClearEndDate() *AssignmentUpdateOne {
	auo.mutation.ClearEndDate()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AssignmentUpdateOne) SetStatus(a assignment.Status) *AssignmentUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableStatus(a *assignment.Status) *AssignmentUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (auo *AssignmentUpdateOne) AddStatementIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.AddStatementIDs(ids...)
	return auo
}

// AddStatements adds the "statements" edges to the Statement entity.
func (auo *AssignmentUpdateOne) AddStatements(s ...*Statement) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddStatementIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (auo *AssignmentUpdateOne) Mutation() *AssignmentMutation {
	return auo.mutation
}

// ClearStatements clears all "statements" edges to the Statement entity.
func (auo *AssignmentUpdateOne) ClearStatements() *AssignmentUpdateOne {
	auo.mutation.ClearStatements()
	return auo
}

// RemoveStatementIDs removes the "statements" edge to Statement entities by IDs.
func (auo *AssignmentUpdateOne) RemoveStatementIDs(ids ...uuid.UUID) *AssignmentUpdateOne {
	auo.mutation.RemoveStatementIDs(ids...)
	return auo
}

// RemoveStatements removes "statements" edges to Statement entities.
func (auo *AssignmentUpdateOne) RemoveStatements(s ...*Statement) *AssignmentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveStatementIDs(ids...)
}

// Where appends a list predicates to the AssignmentUpdate builder.
func (auo *AssignmentUpdateOne) Where(ps ...predicate.Assignment) *AssignmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssignmentUpdateOne) Select(field string, fields ...string) *AssignmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Assignment entity.
func (auo *AssignmentUpdateOne) Save(ctx context.Context) (*Assignment, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssignmentUpdateOne) SaveX(ctx context.Context) *Assignment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssignmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := assignment.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssignmentUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := assignment.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Assignment.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := assignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Assignment.status": %w`, err)}
		}
	}
	if auo.mutation.UserCleared() && len(auo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Assignment.user"`)
	}
	if auo.mutation.ProjectCleared() && len(auo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Assignment.project"`)
	}
	return nil
}

func (auo *AssignmentUpdateOne) sqlSave(ctx context.Context) (_node *Assignment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assignment.Table, assignment.Columns, sqlgraph.NewFieldSpec(assignment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Assignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assignment.FieldID)
		for _, f := range fields {
			if !assignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(assignment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(assignment.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(assignment.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(assignment.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.StartDate(); ok {
		_spec.SetField(assignment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.EndDate(); ok {
		_spec.SetField(assignment.FieldEndDate, field.TypeTime, value)
	}
	if auo.mutation.EndDateCleared() {
		_spec.ClearField(assignment.FieldEndDate, field.TypeTime)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(assignment.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !auo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Assignment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
