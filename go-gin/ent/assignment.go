// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lwandokasuba/project-management/ent/assignment"
	"github.com/lwandokasuba/project-management/ent/project"
	"github.com/lwandokasuba/project-management/ent/user"
)

// Assignment is the model entity for the Assignment schema.
type Assignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Status holds the value of the "status" field.
	Status assignment.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssignmentQuery when eager-loading is set.
	Edges               AssignmentEdges `json:"edges"`
	project_assignments *uuid.UUID
	user_assignments    *uuid.UUID
	selectValues        sql.SelectValues
}

// AssignmentEdges holds the relations/edges for other nodes in the graph.
type AssignmentEdges struct {
	// An assignment only has one user and can't be changed after creation
	User *User `json:"user,omitempty"`
	// An assignment only has one project and can't be changed after creation
	Project *Project `json:"project,omitempty"`
	// An assignment can have many statements.
	Statements []*Statement `json:"statements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssignmentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssignmentEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// StatementsOrErr returns the Statements value or an error if the edge
// was not loaded in eager-loading.
func (e AssignmentEdges) StatementsOrErr() ([]*Statement, error) {
	if e.loadedTypes[2] {
		return e.Statements, nil
	}
	return nil, &NotLoadedError{edge: "statements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Assignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assignment.FieldTitle, assignment.FieldDescription, assignment.FieldStatus:
			values[i] = new(sql.NullString)
		case assignment.FieldCreateTime, assignment.FieldUpdateTime, assignment.FieldStartDate, assignment.FieldEndDate:
			values[i] = new(sql.NullTime)
		case assignment.FieldID:
			values[i] = new(uuid.UUID)
		case assignment.ForeignKeys[0]: // project_assignments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case assignment.ForeignKeys[1]: // user_assignments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Assignment fields.
func (a *Assignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assignment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case assignment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case assignment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case assignment.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case assignment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = new(string)
				*a.Description = value.String
			}
		case assignment.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				a.StartDate = value.Time
			}
		case assignment.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				a.EndDate = new(time.Time)
				*a.EndDate = value.Time
			}
		case assignment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = assignment.Status(value.String)
			}
		case assignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignments", values[i])
			} else if value.Valid {
				a.project_assignments = new(uuid.UUID)
				*a.project_assignments = *value.S.(*uuid.UUID)
			}
		case assignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_assignments", values[i])
			} else if value.Valid {
				a.user_assignments = new(uuid.UUID)
				*a.user_assignments = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Assignment.
// This includes values selected through modifiers, order, etc.
func (a *Assignment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Assignment entity.
func (a *Assignment) QueryUser() *UserQuery {
	return NewAssignmentClient(a.config).QueryUser(a)
}

// QueryProject queries the "project" edge of the Assignment entity.
func (a *Assignment) QueryProject() *ProjectQuery {
	return NewAssignmentClient(a.config).QueryProject(a)
}

// QueryStatements queries the "statements" edge of the Assignment entity.
func (a *Assignment) QueryStatements() *StatementQuery {
	return NewAssignmentClient(a.config).QueryStatements(a)
}

// Update returns a builder for updating this Assignment.
// Note that you need to call Assignment.Unwrap() before calling this method if this Assignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Assignment) Update() *AssignmentUpdateOne {
	return NewAssignmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Assignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Assignment) Unwrap() *Assignment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Assignment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Assignment) String() string {
	var builder strings.Builder
	builder.WriteString("Assignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	if v := a.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(a.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Assignments is a parsable slice of Assignment.
type Assignments []*Assignment
