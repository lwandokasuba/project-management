// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lwandokasuba/project-management/ent/predicate"
	"github.com/lwandokasuba/project-management/ent/statement"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks    []Hook
	mutation *StatementMutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *StatementUpdate) SetUpdateTime(t time.Time) *StatementUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetAmount sets the "amount" field.
func (su *StatementUpdate) SetAmount(f float64) *StatementUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(f)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StatementUpdate) SetNillableAmount(f *float64) *StatementUpdate {
	if f != nil {
		su.SetAmount(*f)
	}
	return su
}

// AddAmount adds f to the "amount" field.
func (su *StatementUpdate) AddAmount(f float64) *StatementUpdate {
	su.mutation.AddAmount(f)
	return su
}

// SetDescription sets the "description" field.
func (su *StatementUpdate) SetDescription(s string) *StatementUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StatementUpdate) SetNillableDescription(s *string) *StatementUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StatementUpdate) ClearDescription() *StatementUpdate {
	su.mutation.ClearDescription()
	return su
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatementUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := statement.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatementUpdate) check() error {
	if su.mutation.AssignmentCleared() && len(su.mutation.AssignmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Statement.assignment"`)
	}
	return nil
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(statement.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(statement.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(statement.FieldDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatementMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *StatementUpdateOne) SetUpdateTime(t time.Time) *StatementUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetAmount sets the "amount" field.
func (suo *StatementUpdateOne) SetAmount(f float64) *StatementUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(f)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableAmount(f *float64) *StatementUpdateOne {
	if f != nil {
		suo.SetAmount(*f)
	}
	return suo
}

// AddAmount adds f to the "amount" field.
func (suo *StatementUpdateOne) AddAmount(f float64) *StatementUpdateOne {
	suo.mutation.AddAmount(f)
	return suo
}

// SetDescription sets the "description" field.
func (suo *StatementUpdateOne) SetDescription(s string) *StatementUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StatementUpdateOne) SetNillableDescription(s *string) *StatementUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StatementUpdateOne) ClearDescription() *StatementUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (suo *StatementUpdateOne) Where(ps ...predicate.Statement) *StatementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatementUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := statement.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatementUpdateOne) check() error {
	if suo.mutation.AssignmentCleared() && len(suo.mutation.AssignmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Statement.assignment"`)
	}
	return nil
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(statement.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(statement.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(statement.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(statement.FieldDescription, field.TypeString)
	}
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
