// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lwandokasuba/project-management/ent/assignment"
	"github.com/lwandokasuba/project-management/ent/project"
	"github.com/lwandokasuba/project-management/ent/statement"
	"github.com/lwandokasuba/project-management/ent/user"
)

// AssignmentCreate is the builder for creating a Assignment entity.
type AssignmentCreate struct {
	config
	mutation *AssignmentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AssignmentCreate) SetCreateTime(t time.Time) *AssignmentCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableCreateTime(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AssignmentCreate) SetUpdateTime(t time.Time) *AssignmentCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableUpdateTime(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AssignmentCreate) SetTitle(s string) *AssignmentCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AssignmentCreate) SetDescription(s string) *AssignmentCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableDescription(s *string) *AssignmentCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetStartDate sets the "start_date" field.
func (ac *AssignmentCreate) SetStartDate(t time.Time) *AssignmentCreate {
	ac.mutation.SetStartDate(t)
	return ac
}

// SetEndDate sets the "end_date" field.
func (ac *AssignmentCreate) SetEndDate(t time.Time) *AssignmentCreate {
	ac.mutation.SetEndDate(t)
	return ac
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableEndDate(t *time.Time) *AssignmentCreate {
	if t != nil {
		ac.SetEndDate(*t)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AssignmentCreate) SetStatus(a assignment.Status) *AssignmentCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetID sets the "id" field.
func (ac *AssignmentCreate) SetID(u uuid.UUID) *AssignmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AssignmentCreate) SetNillableID(u *uuid.UUID) *AssignmentCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ac *AssignmentCreate) SetUserID(id uuid.UUID) *AssignmentCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AssignmentCreate) SetUser(u *User) *AssignmentCreate {
	return ac.SetUserID(u.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ac *AssignmentCreate) SetProjectID(id uuid.UUID) *AssignmentCreate {
	ac.mutation.SetProjectID(id)
	return ac
}

// SetProject sets the "project" edge to the Project entity.
func (ac *AssignmentCreate) SetProject(p *Project) *AssignmentCreate {
	return ac.SetProjectID(p.ID)
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (ac *AssignmentCreate) AddStatementIDs(ids ...uuid.UUID) *AssignmentCreate {
	ac.mutation.AddStatementIDs(ids...)
	return ac
}

// AddStatements adds the "statements" edges to the Statement entity.
func (ac *AssignmentCreate) AddStatements(s ...*Statement) *AssignmentCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddStatementIDs(ids...)
}

// Mutation returns the AssignmentMutation object of the builder.
func (ac *AssignmentCreate) Mutation() *AssignmentMutation {
	return ac.mutation
}

// Save creates the Assignment in the database.
func (ac *AssignmentCreate) Save(ctx context.Context) (*Assignment, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssignmentCreate) SaveX(ctx context.Context) *Assignment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssignmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssignmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssignmentCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := assignment.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := assignment.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := assignment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssignmentCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Assignment.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Assignment.update_time"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Assignment.title"`)}
	}
	if v, ok := ac.mutation.Title(); ok {
		if err := assignment.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Assignment.title": %w`, err)}
		}
	}
	if _, ok := ac.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Assignment.start_date"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Assignment.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := assignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Assignment.status": %w`, err)}
		}
	}
	if len(ac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Assignment.user"`)}
	}
	if len(ac.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Assignment.project"`)}
	}
	return nil
}

func (ac *AssignmentCreate) sqlSave(ctx context.Context) (*Assignment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AssignmentCreate) createSpec() (*Assignment, *sqlgraph.CreateSpec) {
	var (
		_node = &Assignment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(assignment.Table, sqlgraph.NewFieldSpec(assignment.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(assignment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(assignment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.SetField(assignment.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(assignment.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ac.mutation.StartDate(); ok {
		_spec.SetField(assignment.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ac.mutation.EndDate(); ok {
		_spec.SetField(assignment.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(assignment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.UserTable,
			Columns: []string{assignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assignment.ProjectTable,
			Columns: []string{assignment.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assignment.StatementsTable,
			Columns: []string{assignment.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssignmentCreateBulk is the builder for creating many Assignment entities in bulk.
type AssignmentCreateBulk struct {
	config
	err      error
	builders []*AssignmentCreate
}

// Save creates the Assignment entities in the database.
func (acb *AssignmentCreateBulk) Save(ctx context.Context) ([]*Assignment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Assignment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssignmentCreateBulk) SaveX(ctx context.Context) []*Assignment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
